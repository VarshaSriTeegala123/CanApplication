def repoName
def gitCommit
pipeline {
  agent any
  tools {
  nodejs "NODE"
  maven "maven3.6.3"
  }
  environment {
        buildnumber = "${BUILD_NUMBER}"
        jobName    = "${env.JOB_NAME}"
        
        
    }
  stages{
     
    stage('SCM Checkout'){
	steps {
       checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'GithubCredentails', url: 'https://github.com/mudaliar20/CanApplication.git']]])
        gitCommit = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
                
    }
	}
    
    stage(" Maven Clean Package"){
	steps{
     // def mavenHome =  tool name: "maven3.6.3", type: "maven"
     // def mavenCMD = "${mavenHome}/bin/mvn"
      sh "mvn clean package -DskipTests"
      sh 'npm install'
      
    } 
	}
    

    
    stage('Build Docker Image'){
	steps{
        sh 'docker build -t 3.128.135.88:8083/petclinic:${BUILD_NUMBER} . >&1 | tee SomeFile.txt '
    }
	}
    
    stage('Push Docker Image'){
	steps{
	    sh '''
	     PORT="$(grep "Step 5/5" ${WORKSPACE}/SomeFile.txt | sed 's/.* ://' |  sed -e 's/^[[:space:]]*//')"
        echo "${PORT}"
        docker login -u admin -p admin123 3.128.135.88:8083
        docker push 3.128.135.88:8083/petclinic:${BUILD_NUMBER}
        '''
     }
	 }
     
  
	
     stage('Test') {
	 steps{
	 script{
	 repoName = determineRepoName()
         branchName = getGitBranchName() 
	 }
	     sh ' rm -rf *.properties'
         sh "echo jobName=${env.JOB_NAME} >> variable.properties"
sh "echo buildNumber=${env.BUILD_NUMBER} >> variable.properties"
sh "echo repoName=$repoName >> variable.properties"
sh "echo commitId=${gitCommit} >> variable.properties"
sh "echo BlackDuckProject=Canada-Application >> variable.properties"
sh "echo BlackDuckVersion=${env.BUILD_NUMBER} >> variable.properties"
sh "echo ImageID=sha256:70099e509feb7f4ccfd7629deb1a028b704aac49fec3d56abe82b66c7a2cc4eb >> variable.properties"
    }
     }
     
    
}
  
    post {
        always {
            
            archiveArtifacts artifacts: "variable.properties"
        }
    } 

}



String determineRepoName() {
    return scm.getUserRemoteConfigs()[0].getUrl().tokenize('/')[3].split("\\.")[0]
}
String determineRepoURL() {
    return scm.getUserRemoteConfigs()[0].getUrl()
}
String getGitBranchName() {
    return scm.branches[0].name.tokenize("*")[0].split("\\/")[1]
}
